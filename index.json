[{"content":"I specify that I\u0026rsquo;m using Vmware Worksation 16 Pro. The installation of a Virtual Machine (VM) is running the same way if you use the Player version.\nDownload an iso image Go to the download page of the desired OS. In this exemple, we gonna choose a very known Linux distribution, Ubuntu.\nCreate the virtual machine On Vmware, select \u0026ldquo;Create a new virtual machine\u0026rdquo;:\nA virtual machine creation wizard appears.\nSelect \u0026ldquo;Typical\u0026rdquo;, then \u0026ldquo;Next\u0026rdquo;:\nChoose the option \u0026ldquo;Install disc image file (iso), then select the .iso file you just downloaded, then \u0026ldquo;Next\u0026rdquo;.\n‚ö†Ô∏è Caution! The following window may not appear when creating your VM. Don\u0026rsquo;t panic! This is a feature that is only supported by some OS but it doesn\u0026rsquo;t change the installation at all.\nLinux Ubuntu supports \u0026ldquo;Easy Install\u0026rdquo;. Thanks to this, we can enter the login and password information when creating the VM.\nVous pouvez ensuite changer le nom de votre machine.\nYou can then change the name of your machine.\nPersonnaly, for the storage options, I leave the default settings:\nOn this window, you have the possibility to modify the resources allocated to this VM. Here I leave it as default. You can press \u0026ldquo;Finish\u0026rdquo; to start the machine.\nAnd we finally arrive at our virtual machine! ü§©\n","permalink":"https://twimart.github.io/posts/vmware/","summary":"I specify that I\u0026rsquo;m using Vmware Worksation 16 Pro. The installation of a Virtual Machine (VM) is running the same way if you use the Player version.\nDownload an iso image Go to the download page of the desired OS. In this exemple, we gonna choose a very known Linux distribution, Ubuntu.\nCreate the virtual machine On Vmware, select \u0026ldquo;Create a new virtual machine\u0026rdquo;:\nA virtual machine creation wizard appears.","title":"Create a virtual machine with Vmware"},{"content":"In this note, we will see how to install a proxy server, using Pfsense and Squid. We will use virtual machines, created under Vmware.\nTopology of our network Here is the network topology that we will use in this tutorial:\nTo access the Internet, the \u0026ldquo;Linux\u0026rdquo; PC will go through the \u0026ldquo;Pfsense\u0026rdquo; router, in order to leave the local network \u0026ldquo;LAN\u0026rdquo;. Here the subtlety is that if \u0026ldquo;Linux\u0026rdquo; wants to access some web pages, these requests will first go through our proxy server \u0026ldquo;Squid\u0026rdquo;. \u0026ldquo;Squid\u0026rdquo; will then be able to block some web pages or save some data in its cache to improve performance.\nI specify that this schema is only an illustration, Pfsense and Squid are actually one machine in our case.\nCreation of the virtual machine On the download page of Pfsense, download the iso of our future virtual machine. I would like to specify that you will get a .gz file, you have to extract this file on your computer.\nThen, on Vmware, you can create your virtual machine. (you can follow my tutorial here ).\nInstalling Pfsense You can now start your virtual machine.\nClick on \u0026ldquo;Accept\u0026rdquo;.\nSelect \u0026ldquo;Install\u0026rdquo;, then \u0026ldquo;OK\u0026rdquo;.\nThe wizard will then ask you to select the layout of your keyboard (I have a french keyboard). Select the layout that suits you, then press \u0026ldquo;Select\u0026rdquo;.\nConfirm your choice.\nWe are then asked how to partion our disk. Choose \u0026ldquo;Auto (UFS) BIOS\u0026rdquo;, then \u0026ldquo;OK\u0026rdquo;.\nPfsense will then start its installation:\nYou will restart the virtual machine when the wizard suggests it.\nOn reboot, you will be asked if the VLANS should be configured. Press \u0026ldquo;n\u0026rdquo; then \u0026ldquo;Enter\u0026rdquo;.\nThen you have to tell Pfsense which interfaces correspond to the WAN and the LAN. Don\u0026rsquo;t worry if you don\u0026rsquo;t know, we can change that later! In my case, I put:\n\u0026ldquo;em1\u0026rdquo; for the WAN \u0026ldquo;em0\u0026rdquo; for the LAN Confirm by pressing \u0026ldquo;y\u0026rdquo;:\nAnd we done with the Pfsense installation! You should now arrive at the main configuration menu.\nthe next parts is comming soon ! üòâ\n","permalink":"https://twimart.github.io/posts/proxy/","summary":"In this note, we will see how to install a proxy server, using Pfsense and Squid. We will use virtual machines, created under Vmware.\nTopology of our network Here is the network topology that we will use in this tutorial:\nTo access the Internet, the \u0026ldquo;Linux\u0026rdquo; PC will go through the \u0026ldquo;Pfsense\u0026rdquo; router, in order to leave the local network \u0026ldquo;LAN\u0026rdquo;. Here the subtlety is that if \u0026ldquo;Linux\u0026rdquo; wants to access some web pages, these requests will first go through our proxy server \u0026ldquo;Squid\u0026rdquo;.","title":"Create a proxy server with Pfsense and Squid"},{"content":"Basic Configuration Switch to privileged mode, then terminal configuration:\nSwitch\u0026gt;en Switch#conf t D√©finir le nom du switch, ainsi que le domaine auquel il appartient (optionnel).\nSwitch(config)# Switch(config)# hostname SwitchToto SwitchToto(config)# ip domain-name exempledomaine.local SwitchToto(config)# end Define the IP addressing of the switch. To do this, we must create a VLAN dedicated to the switch configuration (here vlan 10). The IP we are going to define will be associated to this VLAN. Create the VLAN:\nSwitchToto(config)# vlan 10 SwitchToto(config-vlan)# exit Then define the IP configuration:\nIP address: 192.168.10.1 Subnet mask: 255.255.255.0 Default gateway: 192.168.10.254 SwitchToto(config)# interface vlan 10 SwitchToto(config-if)# ip address 192.168.10.1 255.255.255.0 SwitchToto(config-if)# ex SwitchToto(config)# ip default-gateway 192.168.10.254 To check the configuration of our administration vlan:\nSwitchToto# sh run int vlan 10 To delete the IP address, the subnet mask, and the defaut gateway:\nSwitchToto(config)# interface vlan 10 SwitchToto(config-if)# no ip address SwitchToto(config-if)# ex SwitchToto(config)# no ip default-gateway Now we need to secure our switch. Even if this step is optional, I strongly recommend it.\nWe will first hide the future passwords that we will put on this switch, so that they will not be displayed on the screen even during a show running config. So we will add the password-encryption service.\nSwitch(config)# service password-encryption Then we can define the password that will be requested when we need to access to the privileged mode:\nSwitchToto(config)# enable secret P@55w0rd Now, if I want to access to the privileged mode, I will have to enter the \u0026ldquo;P@55w0rd\u0026rdquo; password (which is a very bad password btw).\nSave the configuration Explanation The Cisco switch has 2 configurations: the \u0026ldquo;running-config\u0026rdquo; and the \u0026ldquo;startup-config\u0026rdquo;. When the switch starts, it uses its \u0026ldquo;startup-config\u0026rdquo;. If configuration changes are created, they will be done in the running-config. The switch will then use its \u0026ldquo;running-config\u0026rdquo;. On the other hand, if the changes made turn out to be a failure, you just need to reboot it. Thus, the switch will use its \u0026ldquo;startup-config\u0026rdquo;, which has not changed. When changes made are validated, the running-config can be copied to the startup-config. The changes will then be taken into account in the default startup-config of the switch.\nCommands SwitchToto# copy running-config starting-config Destination filename [startup-config]? Building configuration... [OK] 0 bytes copied in 0.923 secs (0 bytes/sec) SwitchToto# write Building configuration... [OK] SwitchToto# You should now have a configurated and secure switch ! üòä\n","permalink":"https://twimart.github.io/posts/cisco-config/","summary":"Basic Configuration Switch to privileged mode, then terminal configuration:\nSwitch\u0026gt;en Switch#conf t D√©finir le nom du switch, ainsi que le domaine auquel il appartient (optionnel).\nSwitch(config)# Switch(config)# hostname SwitchToto SwitchToto(config)# ip domain-name exempledomaine.local SwitchToto(config)# end Define the IP addressing of the switch. To do this, we must create a VLAN dedicated to the switch configuration (here vlan 10). The IP we are going to define will be associated to this VLAN.","title":"Basic configuration for a Cisco device"},{"content":"Install Bind9:\nsudo apt-get install bind9\nThe Bind9 files are in /etc/bind/\ncd /etc/bind/ Then, we put these 3 lines in the named.conf file:\ninclude \u0026#34;/etc/bind/named.conf.options\u0026#34;; include \u0026#34;/etc/bind/named.conf.local\u0026#34;; include \u0026#34;/etc/bind/named.conf.default-zones\u0026#34;; In the Bind9 configuration file \u0026ldquo;named.conf.local\u0026rdquo;, declare its zones :\nzone \u0026#34;example.com\u0026#34; { type master; file \u0026#34;/etc/bind/db.example.com\u0026#34;; }; ‚Üí The \u0026ldquo;file\u0026rdquo; line specifies that the configuration of our example.com zone will be done in the \u0026ldquo;db.example.com\u0026rdquo; file.\nIn db.example.com, we configure our zone (the IP of my DNS server is 192.168.1.15 ):\n; ; BIND data file for example.com ; $TTL 604800 @ IN SOA example.com. root.example.com. ( 2 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 604800 ) ; Negative Cache TTL IN A 192.168.1.15 ; @ IN NS ns.example.com. ns IN A 192.168.1.15 serv1 IN A 192.168.1.1 serv2 IN A 192.168.1.2 The first paragraph corresponds to the SOA record, we can leave it as it is.\nIn the second paragraph, we are going to give information to our DNS server, that means, we are going to enter manually the names of machines and their IP useful to my DNS server.\n‚ö† It is strongly recommended to make the NS record, it is the standard.\nFirst, I gave my DNS server the IPs of the other DNS servers in the example.com domain (this is the NS record). Although there is only one (my DNS server), I put it anyway.\nThen I declared 2 web servers, serv1 and serv2.\nI remind you that you will have to adapt this configuration according to your needs, this is only an example.\nIf our DNS server is not able to resolve a certain domain name, it must send these requests to other DNS servers that can do it. These servers are called \u0026ldquo;forwarders\u0026rdquo;. We must indicate them in the file \u0026ldquo;named.conf.options\u0026rdquo;.\nforwarders { 8.8.8.8; 172.25.254.15 ; }; You should now have a working DNS server! üòÅ\n","permalink":"https://twimart.github.io/posts/linux-dns/","summary":"Install Bind9:\nsudo apt-get install bind9\nThe Bind9 files are in /etc/bind/\ncd /etc/bind/ Then, we put these 3 lines in the named.conf file:\ninclude \u0026#34;/etc/bind/named.conf.options\u0026#34;; include \u0026#34;/etc/bind/named.conf.local\u0026#34;; include \u0026#34;/etc/bind/named.conf.default-zones\u0026#34;; In the Bind9 configuration file \u0026ldquo;named.conf.local\u0026rdquo;, declare its zones :\nzone \u0026#34;example.com\u0026#34; { type master; file \u0026#34;/etc/bind/db.example.com\u0026#34;; }; ‚Üí The \u0026ldquo;file\u0026rdquo; line specifies that the configuration of our example.com zone will be done in the \u0026ldquo;db.example.com\u0026rdquo; file.\nIn db.example.com, we configure our zone (the IP of my DNS server is 192.","title":"Create and configure a DNS server on Linux with Bind9"},{"content":"Creation of user names, domains, and keys (Here we take an exemple of Cisco router.)\nFirstly, if you haven\u0026rsquo;t already done so, give your device a personalized name and a domain name:\nRouter(config)# hostname Toto Toto(config)# ip domain-name exemple.com Remember to secure the privileged mode of your device!\nToto(config)# enable secret \u0026lt;mot_de_passe\u0026gt; Then, we have to tell to our router (or switch) to generate aymetric key pair (required to the SSH connection). We also need to encrypt these keys, we gonna use RSA protocol to do that:\nToto(config)# crypto key generate rsa We will then be asked to the desired size of the key. Personnaly, I put 1024 bits.\nThe name for the keys will be: Toto.exemple.com Choose the size of the key modulus in the range of 360 to 2048 for your General Purpose Keys. Choosing a key modulus greater than 512 may take a few minutes. How many bits in the modulus [512]: 1024 % Generating 1024 bit RSA keys, keys will be non-exportable. . . [OK] Toto(config)# We will now create a user, it is with his logins that we can connect to the router (or switch) remotely. Here, I put thomas for the username and admin for the password, but of course you can put any value you want.\nToto(config)# username thomas password admin Enabling the SSH protocol On peut maintenant activer le protocole SSH sur notre routeur (ou switch): We can enable the SSH protocol on our device:\nToto(config)# ip ssh version 2 A brief note on the commands that will follow: To connect to a remote device, there are two main protocols: Telnet and SSH. Telnet is a simple protocol that works well, but is not at all secure and encrypted: this means that anyone can intercept the communication frames between you and the device.\nSSH is encrypted (thanks to the keys we generated earlier). The standard is that we force our device to communicate only in SSH, and so the connection in Telnet is impossible (for more security).\nThis is what we are going to do now:\nWe will first force our switch to accept only incoming SSH communication:\nToto(config)# line vty 0 4 Toto(config-line)# transport input ssh Then we do the same for the outgoing communication:\nToto(config-line)# transport output ssh Now, we can check the configuration changes:\nToto# show running-config Remember to save the new configuration!\nToto# copy running-config startup-config Connection test (with PuTTy) PuTTy is a free software that allows you to connect to a device in many different ways: serial cable, Telnet, SSH\u0026hellip; You can select SSH, then enter the IP address of your Cisco device (mine was 192.168.100.33):\nYou will then be asked for a username. You can put the one you created before (in my case thomas). Then you can enter the corresponding password for that user (in my case it\u0026rsquo;s admin).\nAnd you finally connected!\nYou will be asked for a password if you want to enter the privileged mode. That\u0026rsquo;s the one you put during the enable secret \u0026lt;password\u0026gt; command.\nThat\u0026rsquo;s all for the SSH connection on Cisco üòÅ!\n","permalink":"https://twimart.github.io/posts/cisco-ssh/","summary":"Creation of user names, domains, and keys (Here we take an exemple of Cisco router.)\nFirstly, if you haven\u0026rsquo;t already done so, give your device a personalized name and a domain name:\nRouter(config)# hostname Toto Toto(config)# ip domain-name exemple.com Remember to secure the privileged mode of your device!\nToto(config)# enable secret \u0026lt;mot_de_passe\u0026gt; Then, we have to tell to our router (or switch) to generate aymetric key pair (required to the SSH connection).","title":"Set up an SSH connection on a Cisco device"},{"content":"Here is my portfolio üìë : About me My name is Thomas, and I live in Amiens, France. I\u0026rsquo;m currently a computer science student, and I\u0026rsquo;m very interested in computer network administration, as well as in cybersecurity. This site serves me as a portfolio, but also as personal notes for the missions I have to accomplish for my studies.\nMy projects The design and maintenance of this site is already a project in itself: indeed the web development is not really my strong point and it took a lot of time to make this website working\u0026hellip; But I have learn several things üôÇ.\nMy Certifications I have a Cisco Netacad NDG Linux Essential certification. This certification attests to my knowledge of basic Linux commands.\nMy Resume the english version and the photo will come soon!\n","permalink":"https://twimart.github.io/english/portfolio/","summary":"Here is my portfolio üìë : About me My name is Thomas, and I live in Amiens, France. I\u0026rsquo;m currently a computer science student, and I\u0026rsquo;m very interested in computer network administration, as well as in cybersecurity. This site serves me as a portfolio, but also as personal notes for the missions I have to accomplish for my studies.\nMy projects The design and maintenance of this site is already a project in itself: indeed the web development is not really my strong point and it took a lot of time to make this website working\u0026hellip; But I have learn several things üôÇ.","title":"My Portfolio"},{"content":"- hugo new site sitename -f yml Allows you to create the basic files for the creation of a new web site. The \u0026ldquo;-f yml\u0026rdquo; option will force the creation of the main configuration file in .yml (which I recommend).\n- hugo server Allows you to launch the web server from Hugo; this will allows us to see in live the modifications made to our web site. You have to execute this commands in the root from our site.\n- hugo new posts/filename.md Allows us to create a new posts. The extention .md specifies that we gonna use Markdown syntax.\n","permalink":"https://twimart.github.io/posts/hugo-commands/","summary":"- hugo new site sitename -f yml Allows you to create the basic files for the creation of a new web site. The \u0026ldquo;-f yml\u0026rdquo; option will force the creation of the main configuration file in .yml (which I recommend).\n- hugo server Allows you to launch the web server from Hugo; this will allows us to see in live the modifications made to our web site. You have to execute this commands in the root from our site.","title":"Hugo basic commands"}]